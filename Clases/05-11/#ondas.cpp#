#include <iostream>
#include <fstream>
#include <cmath>
using namespace std;

#define Lx 128
#define Ly 128
#define N 32
const int M = (Lx*Ly + N-1)/N;
#define Q 5
const ArraySize=Lx*Ly*Q;




const float W0=1.0/3;

const float C=0.5; // C<0.707 cells/click
const float C2=C*C;
const float AUX0=1-3*C2*(1-W0);

const float tau=0.5;
const float Utau=1.0/tau;
const float UmUtau=1-Utau;


///Programa en el device

__constant__ float d_w[5];
__constant__ int  d_Vx[5];
__constant__ int d_Vy[5];
__constant__ float d_C[3]; //Cada una de las componentes de estos arrays representa una cantidad relacionada.   
__constant__ float d_tau[3];
//Data index
__device__ int d_n(int ix, int iy, int i){
  return (ix*Ly+iy)*Q + i;
}

//Macroscopics fields

float d_rho(int ix,int iy){
  float sum; int i,n0;
  for(sum=0,i=0;i<Q;i++){
    n0=d_n(ix,iy,i);
     sum+=d_f[n0];
  }
  return sum;
}  
float d_Jx(int ix,int iy){
  float sum; int i,n0;
  for(sum=0,i=0;i<Q;i++){
    n0=d_n(ix,iy,i);
     sum+=d_Vx[i]*d_f[n0];
  }
  return sum;
}  
float d_Jy(int ix,int iy){
  float sum; int i,n0;
  for(sum=0,i=0;i<Q;i++){
    n0=d_n(ix,iy,i);
     sum+=d_Vy[i]*d_f[n0];
  }
  return sum;
}  

//Eq functions

__device__ float d_feq(float rho0,float Jx0,float Jy0,int i){


    return 3*d_w[i]*(d_C[1]*rho0+d_Vx[i]*Jx0+d_Vy[i]*Jy0);
 
}


__device__ float d_f0eq(float rho0,float Jx0,float Jy0,int i){


    return rho0*d_C[2];
}


__global__ void d_Collision(float *d_f, float *d_fnew){

  int icell, ix, iy, i, n0; float rho0, Jx0, Jy0;
  icell = blocIdx.x*blockDim.c + threadIdx.x;
  ix = icell/Ly; iy = icell%Ly;

  rho0 = d_rho(ix, iy, d_f);
  Jx0 = d_Jx(ix, iy, d_f);
  Jy0 = d_Jy(ix, iy, d_f);

  n0 = d_n(ix, iy, 0); d_fnew[n0]=d_tau[2]*d_tau[1]*d_f0eq(rho0, Jx0, Jy0);

  for(i=1; i<Q; i++){
    n0 = d_n(ix, iy, i); d_fnew[n0]=d_tau[2]*d_tau[1]*d_feq(rho0, Jx0, Jy0);

  }
  

}


//______________________Programa en el host_____________-

//--------------------- Clase LatticeBoltzmann ------------
class LatticeBoltzmann{
private:

  float h_C[3];
  float h_tau[3];
  float h_w[Q];      //Weights 
  int h_Vx[Q],h_Vy[Q];  //Velocity vectors
  float *h_f, *h_fnew; float *d_f, *d_fnew;//Distribution Functions
public:
  LatticeBoltzmann(void);
  ~LatticeBoltzmann(void);
  int h_n(int ix,int iy,int i){return (ix*Ly+iy)*Q+i;};
  float h_rho(int ix,int iy);
  float h_Jx(int ix,int iy);
  float h_Jy(int ix,int iy);
  float h_feq(float rho0,float Jx0,float Jy0,int i);
  void Start(float rho0,float Jx0,float Jy0);
  void Collision(void);
  void ImposeFields(int t);
  void Advection(void);
  void Print(const char * NameFile);

};
LatticeBoltzmann::LatticeBoltzmann(void){

  h_C[0]=C; h_C[1]=C2; h_C[2]=AUX0;
  h_tau[0]=tau; h_tau[0]=Utau; h_tau[0]=UmUtau;
  
 
  //Set the h_weights
  h_w[0]=W0; h_w[1]=h_w[2]=h_w[3]=h_w[4]=(1.0-W0)/4;
  //Set the velocity vectors
  h_Vx[0]=0;  h_Vx[1]=1;  h_Vx[2]=0;  h_Vx[3]=-1; h_Vx[4]=0;
  Vy[0]=0;  h_Vy[1]=0;  h_Vy[2]=1;  h_Vy[3]=0; h_Vy[4]=-1;
  cudaMemcpyToSymbols(d_w,h_w,Q*sizeof(float), 0, cudaMemcpyHostToDevice)
  cudaMemcpyToSymbols(d_Vx,h_Vx,Q*sizeof(float), 0, cudaMemcpyHostToDevice)
  cudaMemcpyToSymbols(d_Vy,h_Vy,Q*sizeof(float), 0, cudaMemcpyHostToDevice)
  cudaMemcpyToSymbols(d_C,h_C,3*sizeof(float), 0, cudaMemcpyHostToDevice)
  cudaMemcpyToSymbols(d_tau,h_tau,3*sizeof(float), 0, cudaMemcpyHostToDevice)


  
  //Create the dynamic arrays
  
  h_f=new float [ArraySize];  h_fnew=new float [ArraySize];
  cudaMalloc((void**) &d_f, ArrySize*sizeof(float));
  cudaMalloc((void**) &d_fnew, ArrySize*sizeof(float));
  h_Test = new float [1]; cudaMalloc((void**) &d_test, sizeof(float));

}
LatticeBoltzmann::~LatticeBoltzmann(void){
    delete[] h_f;  delete[] h_fnew;
    cudaFree(d_f); cudaFree(d_fnew);
}
float LatticeBoltzmann::h_rho(int ix,int iy,bool UseNew){
  float sum; int i,n0;
  for(sum=0,i=0;i<Q;i++){
    n0=h_n(ix,iy,i);
    sum+=h_fnew[n0];
  }
  return sum;
}  
float LatticeBoltzmann::h_Jx(int ix,int iy,bool UseNew){
  float sum; int i,n0;
  for(sum=0,i=0;i<Q;i++){
    n0=h_n(ix,iy,i);
    sum+=h_Vx[i]*h_fnew[n0];
  }
  return sum;
}  
float LatticeBoltzmann::h_Jy(int ix,int iy,bool UseNew){
  float sum; int i,n0;
  for(sum=0,i=0;i<Q;i++){
    n0=h_n(ix,iy,i);
   sum+=h_Vy[i]*h_fnew[n0]; 
  }
  return sum;
}  
float  LatticeBoltzmann::h_feq(float rho0,float Jx0,float Jy0,int i){
  if(i>0)
    return 3*h_w[i]*(C2*rho0+h_Vx[i]*Jx0+h_Vy[i]*Jy0);
  else
    return rho0*AUX0;
}  
void LatticeBoltzmann::Start(float rho0,float Jx0,float Jy0){
  int ix,iy,i,n0;
  for(ix=0;ix<Lx;ix++) //for each cell
    for(iy=0;iy<Ly;iy++)
      for(i=0;i<Q;i++){ //on each direction
	n0=h_n(ix,iy,i);
	h_f[n0]=h_feq(rho0,Jx0,Jy0,i);
      }

  cudaMemcpy(d_f,h_f, ArraySize*sizeof(float), cudaMemcpyHostToDevice);
}  
void LatticeBoltzmann::Collision(void){
  dim3 ThreadsPerBlock(N,1,1);
  dim3 BlocksPerGrid(M,1,1);
  d_Collision<<BlocksPerGrid, ThreadsPerBlock>>> (float *d_f, float *d_fnew);


}
void LatticeBoltzmann::ImposeFields(int t){
  int i,ix,iy,n0;
  float lambda,omega,rho0,Jx0,Jy0; lambda=10; omega=2*M_PI/lambda*C;
  //an oscillating source in the middle
  ix=Lx/2; iy=Ly/2;
  rho0=10*sin(omega*t); Jx0=h_Jx(ix,iy,false); Jy0=h_Jy(ix,iy,false);
  for(i=0;i<Q;i++){
    n0=h_n(ix,iy,i);
    h_fnew[n0]=h_feq(rho0,Jx0,Jy0,i);
  }
}
void LatticeBoltzmann::Advection(void){
  int ix,iy,i,ixnext,iynext,n0,n0next;
  for(ix=0;ix<Lx;ix++) //for each cell
    for(iy=0;iy<Ly;iy++)
      for(i=0;i<Q;i++){ //on each direction
	ixnext=(ix+h_Vx[i]+Lx)%Lx; iynext=(iy+h_Vy[i]+Ly)%Ly;
	n0=h_n(ix,iy,i); n0next=h_n(ixnext,iynext,i);
	h_f[n0next]=h_fnew[n0]; //periodic boundaries
      }
}
void LatticeBoltzmann::Print(const char * NameFile){
  ofstream MyFile(NameFile); float rho0; int ix,iy;
  cudaMemcpy(h_fnew, d_fnew, ArraySize*sizeof(float), cudaMemcpyDeviceToHost);
  for(ix=0;ix<Lx;ix++){
    for(iy=0;iy<Ly;iy++){
      rho0=h_rho(ix,iy,true);
      MyFile<<ix<<" "<<iy<<" "<<rho0<<endl;
    }
    MyFile<<endl;
  }
  MyFile.close();
}

//------------------- Funciones Globales ------------

int main(void){
  LatticeBoltzmann Ondas;
  int t,tmax=100;
  float rho0=0,Jx0=0,Jy0=0;

  //Start
  Ondas.Start(rho0,Jx0,Jy0);
  //Run
  for(t=0;t<tmax;t++){
    Ondas.Collision();
    Ondas.ImposeFields(t);
    Ondas.Advection();
  }
  //Print
  Ondas.Print("Ondas.dat");

  return 0;
} 
